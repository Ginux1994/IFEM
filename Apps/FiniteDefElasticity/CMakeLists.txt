PROJECT(FiniteDefElasticity)

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

# Required defines
SET(CMAKE_CXX_FLAGS "-Dreal=double")

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF(NOT CMAKE_BUILD_TYPE)

# Add local modules
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} 
                      $ENV{HOME}/cmake/Modules/ 
                      ${PROJECT_SOURCE_DIR}/../../cmake/Modules)

enable_language(Fortran)
IF(CMAKE_Fortran_COMPILER MATCHES ifort)
  SET(LANGUAGE_LIBS -lifcore)
ENDIF(CMAKE_Fortran_COMPILER MATCHES ifort)
enable_language(CXX)
IF(CMAKE_CXX_COMPILER MATCHES icpc)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_MKL")
ELSE()
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_CBLAS")
ENDIF(CMAKE_CXX_COMPILER MATCHES icpc)

# Required packages
FIND_PACKAGE(Boost REQUIRED)
FIND_PACKAGE(GoTools REQUIRED)
FIND_PACKAGE(GoTrivariate REQUIRED)
FIND_PACKAGE(Arpack REQUIRED)
FIND_PACKAGE(BLAS REQUIRED)
FIND_PACKAGE(LAPACK REQUIRED)
FIND_PACKAGE(IFEM REQUIRED)

# Optional packages
IF(${ENABLE_PETSC})
  FIND_PACKAGE(Petsc)
ENDIF(${ENABLE_PETSC})
IF(${ENABLE_SUPERLU})
  FIND_PACKAGE(SuperLU)
ENDIF(${ENABLE_SUPERLU})
IF(${ENABLE_SAMG})
  FIND_PACKAGE(SAMG)
ENDIF(${ENABLE_SAMG})
IF(${ENABLE_VTFWRITER})
  FIND_PACKAGE(VTFWriter)
ENDIF(${ENABLE_VTFWRITER})

# Required libraries
SET(DEPLIBS ${IFEM_LIBRARIES} ${Boost_LIBRARIES} ${GoTrivariate_LIBRARIES}
            ${GoTools_LIBRARIES} ${BLAS_LIBRARIES}
            ${Arpack_LIBRARIES} ${LANGUAGE_LIBS}
)

# Required include directories
SET(INCLUDES
  ${Boost_INCLUDE_DIRS}
  ${GoTools_INCLUDE_DIRS}
  ${GoTrivariate_INCLUDE_DIRS}
  ${Arpack_INCLUDES}
  ${IFEM_INCLUDES}
  ${PROJECT_SOURCE_DIR}/../
)

IF(SuperLU_MT_LIBRARIES AND SuperLU_MT_INCLUDES)
    FIND_PACKAGE(Threads REQUIRED)
    SET(DEPLIBS ${DEPLIBS} ${SuperLU_MT_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
    SET(INCLUDES ${INCLUDES} ${SuperLU_MT_INCLUDES})
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHAS_SUPERLU_MT")
ENDIF(SuperLU_MT_LIBRARIES AND SuperLU_MT_INCLUDES)

IF(NOT (SuperLU_MT_LIBRARIES AND SuperLU_MT_INCLUDES))
  IF(SuperLU_LIBRARIES AND SuperLU_INCLUDES)
    SET(DEPLIBS ${DEPLIBS} ${SuperLU_LIBRARIES})
    SET(INCLUDES ${INCLUDES} ${SuperLU_INCLUDES})
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHAS_SUPERLU")
  ENDIF(SuperLU_LIBRARIES AND SuperLU_INCLUDES)
ENDIF(NOT (SuperLU_MT_LIBRARIES AND SuperLU_MT_INCLUDES))

IF(PETSC_LIBRARIES AND PETSC_INCLUDE_DIR)
  SET(INCLUDES ${INCLUDES} ${PETSC_INCLUDE_DIR})
  SET(DEPLIBS ${DEPLIBS} ${PETSC_LIBRARIES})
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHAS_PETSC")
  FIND_PACKAGE(MPI REQUIRED)
  SET(INCLUDES ${INCLUDES} ${MPI_INCLUDE_PATH})
  SET(DEPLIBS ${DEPLIBS} ${MPI_LIBRARIES})
  FIND_PACKAGE(SLEPc)
  IF(SLEPC_LIBRARIES AND SLEPC_INCLUDES)
    SET(INCLUDES ${INCLUDES} ${SLEPC_INCLUDES})
    SET(DEPLIBS ${DEPLIBS} ${SLEPC_LIBRARIES})
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHAS_SLEPC")
  ENDIF(SLEPC_LIBRARIES AND SLEPC_INCLUDES)
ENDIF(PETSC_LIBRARIES AND PETSC_INCLUDE_DIR)

IF(SAMG_LIBRARIES AND SAMG_INCLUDES)
  SET(DEPLIBS ${DEPLIBS} ${SAMG_LIBRARIES})
  SET(INCLUDES ${INCLUDES} ${SAMG_INCLUDES})
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHAS_SAMG -DSAMG_UNIX_LINUX=1 -DSAMG_LCASE_USCORE")
ENDIF(SAMG_LIBRARIES AND SAMG_INCLUDES)

IF(VTFWRITER_LIBRARIES AND VTFWRITER_INCLUDES)
  SET(DEPLIBS ${DEPLIBS} ${VTFWRITER_LIBRARIES})
  SET(INCLUDES ${INCLUDES} ${VTFWRITER_INCLUDES})
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHAS_VTFAPI=1")
ENDIF(VTFWRITER_LIBRARIES AND VTFWRITER_INCLUDES)

INCLUDE_DIRECTORIES(${INCLUDES})
SET(EXECUTABLE_OUTPUT_PATH bin)

# This line may be needed only on AMD 64 bit... @jbt
# 091120: Adding this because GUV-plugins will need it. (J.O.)
IF(NOT WIN32)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
ENDIF(NOT WIN32)

FILE(GLOB_RECURSE NonLinEl_SRCS ${PROJECT_SOURCE_DIR}/../SIMLinEl2D.C
                                ${PROJECT_SOURCE_DIR}/../SIMLinEl3D.C
                                *.C
                                *.f
                                Material/*.f)

ADD_EXECUTABLE(NonLinEl ${NonLinEl_SRCS})
TARGET_LINK_LIBRARIES(NonLinEl ${DEPLIBS})

# 'install' target
IF(WIN32)
  # TODO
ELSE(WIN32)
  # TODO
ENDIF(WIN32)
