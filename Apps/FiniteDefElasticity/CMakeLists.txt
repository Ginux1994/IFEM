PROJECT(FiniteDefElasticity)

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

# Required defines
SET(CMAKE_CXX_FLAGS "-Dreal=double -DUSE_FTNMAT")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DINDEX_CHECK=2")
IF(VERBOSE_DEBUG GREATER 0)
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DINT_DEBUG=${VERBOSE_DEBUG}")
ENDIF(VERBOSE_DEBUG GREATER 0)

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF(NOT CMAKE_BUILD_TYPE)

ENABLE_TESTING()

IF(NOT IFEM_BUILD_TYPE)
  SET(IFEM_BUILD_TYPE ${CMAKE_BUILD_TYPE})
ENDIF(NOT IFEM_BUILD_TYPE)

IF(${CMAKE_BUILD_TYPE} MATCHES "Nopt")
  SET(CMAKE_BUILD_TYPE Debug)
ELSEIF(${CMAKE_BUILD_TYPE} MATCHES "Nomp")
  SET(CMAKE_BUILD_TYPE Release)
ENDIF(${CMAKE_BUILD_TYPE} MATCHES "Nopt")

# Add local modules
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}
                      ${PROJECT_SOURCE_DIR}/../../cmake/Modules
                      $ENV{HOME}/cmake/Modules)

ENABLE_LANGUAGE(Fortran)
IF(CMAKE_Fortran_COMPILER MATCHES ifort)
  SET(LANGUAGE_LIBS -lifcore)
ENDIF(CMAKE_Fortran_COMPILER MATCHES ifort)

ENABLE_LANGUAGE(CXX)
IF(CMAKE_CXX_COMPILER MATCHES icpc)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_MKL")
ELSE(CMAKE_CXX_COMPILER MATCHES icpc)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_CBLAS")
ENDIF(CMAKE_CXX_COMPILER MATCHES icpc)

# Required packages
FIND_PACKAGE(GoTools REQUIRED)
FIND_PACKAGE(GoTrivariate REQUIRED)
FIND_PACKAGE(LAPACK REQUIRED)
FIND_PACKAGE(ARPACK REQUIRED)
FIND_PACKAGE(IFEM REQUIRED)

# Optional packages
IF(NOT "${DISABLE_LRSPLINE}")
  FIND_PACKAGE(LRSpline)
ENDIF(NOT "${DISABLE_LRSPLINE}")

IF(${ENABLE_PETSC})
  FIND_PACKAGE(Petsc)
ENDIF(${ENABLE_PETSC})

IF(NOT "${DISABLE_SUPERLU}")
  FIND_PACKAGE(SuperLU)
ENDIF(NOT "${DISABLE_SUPERLU}")

IF(${ENABLE_SPR})
  FIND_PACKAGE(SPR)
ENDIF(${ENABLE_SPR})

IF(${ENABLE_SAMG})
  FIND_PACKAGE(SAMG)
ENDIF(${ENABLE_SAMG})

FIND_PACKAGE(VTFWriter)

IF(VTFAPI GREATER 1)
  SET(IFEM_LIBRARIES -Wl,--whole-archive ${IFEM_LIBRARIES} -Wl,--no-whole-archive)
ENDIF(VTFAPI GREATER 1)

IF(NOT "${DISABLE_HDF5}")
  FIND_PACKAGE(HDF5)
ENDIF(NOT "${DISABLE_HDF5}")

IF(NOT "${DISABLE_OPENMP}")
  FIND_PACKAGE(OpenMP)
ENDIF(NOT "${DISABLE_OPENMP}")

IF(OPENMP_FOUND)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -DUSE_OPENMP")
ENDIF(OPENMP_FOUND)

# Required libraries
SET(DEPLIBS ${IFEM_LIBRARIES}
  ${GoTrivariate_LIBRARIES} ${GoTools_LIBRARIES}
  ${ARPACK_LIBRARIES} ${LAPACK_LIBRARIES}
  ${LANGUAGE_LIBS}
)

# Optional libraries
IF(LRSpline_LIBRARIES)
  SET(DEPLIBS ${DEPLIBS} ${LRSpline_LIBRARIES})
ENDIF(LRSpline_LIBRARIES)

IF(SuperLU_MT_LIBRARIES AND "${ENABLE_SUPERLU_MT}")
  FIND_PACKAGE(Threads REQUIRED)
  SET(DEPLIBS ${DEPLIBS} ${SuperLU_MT_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
ELSEIF(SuperLU_LIBRARIES)
  SET(DEPLIBS ${DEPLIBS} ${SuperLU_LIBRARIES})
ENDIF(SuperLU_MT_LIBRARIES AND "${ENABLE_SUPERLU_MT}")

IF(PETSC_LIBRARIES)
  FIND_PACKAGE(SLEPc)
  IF(SLEPC_LIBRARIES)
    SET(DEPLIBS ${DEPLIBS} ${SLEPC_LIBRARIES})
  ENDIF(SLEPC_LIBRARIES)
  SET(DEPLIBS ${DEPLIBS} ${PETSC_LIBRARIES})
  IF(${ENABLE_PARALLEL_PETSC})
    FIND_PACKAGE(MPI REQUIRED)
    SET(DEPLIBS ${DEPLIBS} ${MPI_LIBRARIES})
  ENDIF(${ENABLE_PARALLEL_PETSC})
ENDIF(PETSC_LIBRARIES)

IF(SPR_LIBRARIES)
  SET(DEPLIBS ${DEPLIBS} ${SPR_LIBRARIES})
ENDIF(SPR_LIBRARIES)

IF(SAMG_LIBRARIES)
  SET(DEPLIBS ${DEPLIBS} ${SAMG_LIBRARIES})
ENDIF(SAMG_LIBRARIES)

IF(VTFWRITER_LIBRARIES)
  IF(VTFAPI GREATER 1)
    SET(VTFWRITER_LIBRARIES -Wl,--whole-archive ${VTFWRITER_LIBRARIES} -Wl,--no-whole-archive)
  ENDIF(VTFAPI GREATER 1)
  SET(DEPLIBS ${DEPLIBS} ${VTFWRITER_LIBRARIES})
ENDIF(VTFWRITER_LIBRARIES)

IF(HDF5_LIBRARIES)
  SET(DEPLIBS ${DEPLIBS} ${HDF5_LIBRARIES})
ENDIF(HDF5_LIBRARIES)

# MKL (when using the Intel compilers)
IF(CMAKE_CXX_COMPILER MATCHES icpc)
  FIND_PACKAGE(MKL REQUIRED)
  SET(DEPLIBS ${DEPLIBS} ${MKL_LIBRARIES})
  SET(INCLUDES ${INCLUDES} ${MKL_INCLUDES})
ENDIF(CMAKE_CXX_COMPILER MATCHES icpc)

INCLUDE_DIRECTORIES(${IFEM_INCLUDES} ${PROJECT_SOURCE_DIR}/../LinearElasticity)

SET(EXECUTABLE_OUTPUT_PATH bin)

IF(NOT WIN32)
  # Emit position-independent code, suitable for dynamic linking
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
  # Enable all warnings
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
ENDIF(NOT WIN32)

FILE(GLOB_RECURSE NonLinEl_SRCS
  ${PROJECT_SOURCE_DIR}/../LinearElasticity/SIMLinEl*.C
  ${PROJECT_SOURCE_DIR}/*.[Cf])

ADD_EXECUTABLE(NonLinEl ${NonLinEl_SRCS})
TARGET_LINK_LIBRARIES(NonLinEl ${DEPLIBS})

ADD_CUSTOM_TARGET(doc doxygen 
                  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
                  COMMENT "Generating API documentation" VERBATIM)

FILE(GLOB_RECURSE NONLINEL_TESTFILES "${PROJECT_SOURCE_DIR}/Test/*.reg")
FOREACH(TESTFILE ${NONLINEL_TESTFILES})
  ADD_TEST(${TESTFILE} ${PROJECT_SOURCE_DIR}/../../test/regtest.sh "${CMAKE_BINARY_DIR}/${EXECUTABLE_OUTPUT_PATH}/NonLinEl" "${TESTFILE}")
ENDFOREACH()

IF(NOT IFEM_INSTALL_PREFIX)
  SET(IFEM_INSTALL_PREFIX $ENV{HOME})
ENDIF(NOT IFEM_INSTALL_PREFIX)

INSTALL(TARGETS NonLinEl DESTINATION ${IFEM_INSTALL_PREFIX}/bin)
