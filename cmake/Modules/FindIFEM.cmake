IF(NOT IFEM_FORCE_SYSTEM_LIB)
  FIND_PATH(IFEM_PATH
    NAMES ${CMAKE_BUILD_TYPE}/IFEM.h
    PATHS ${PROJECT_SOURCE_DIR}/../../
          ${PROJECT_SOURCE_DIR}/../../../ NO_DEFAULT_PATHS)
    SET(IFEM_H_PATH ${IFEM_PATH}/${CMAKE_BUILD_TYPE})
  IF(NOT IFEM_PATH)
  FIND_PATH(IFEM_PATH
    NAMES IFEM.h
    PATHS ${PROJECT_SOURCE_DIR}/../../
          ${PROJECT_SOURCE_DIR}/../../../ NO_DEFAULT_PATHS)
    SET(IFEM_H_PATH ${IFEM_PATH})
  ENDIF(NOT IFEM_PATH)
ENDIF(NOT IFEM_FORCE_SYSTEM_LIB)

MESSAGE(STATUS "Path ${IFEM_PATH}")
IF(IFEM_PATH)
  # Build is in-tree
  MESSAGE(STATUS "Using in-tree libIFEM")

  SET(IFEM_INCLUDES ${IFEM_H_PATH}
                    ${IFEM_PATH}/src/ASM
                    ${IFEM_PATH}/src/Eig
                    ${IFEM_PATH}/src/LinAlg
                    ${IFEM_PATH}/src/SIM
                    ${IFEM_PATH}/src/Utility)

  FIND_LIBRARY(IFEM_LIBRARIES
    NAMES IFEM
    PATHS ${IFEM_PATH}/${CMAKE_BUILD_TYPE}/lib
          ${IFEM_PATH}/lib
    NO_DEFAULT_PATH)
  IF(NOT IFEM_LIBRARIES)
    MESSAGE(WARNING "Could not find the in-tree libIFEM library, "
      "we assume it will be built into a build-type dir")
  ENDIF(NOT IFEM_LIBRARIES)
  IF (NOT BUILD_SHARED_LIBS)
    FIND_PACKAGE(IFEMDeps REQUIRED)
    SET(IFEM_LIBRARIES ${IFEM_LIBRARIES} ${IFEM_DEPLIBS})
  ENDIF(NOT BUILD_SHARED_LIBS)

  IF(NOT IFEM_USE_SYSTEM_TINYXML)
    SET(IFEM_INCLUDES ${IFEM_INCLUDES}
                      ${IFEM_PATH}/../3rdparty/tinyxml)
  ENDIF(NOT IFEM_USE_SYSTEM_TINYXML)
ELSE(IFEM_PATH)
  IF(NOT DEFINED FORCE_SYSTEM_IFEM OR NOT "${FORCE_SYSTEM_IFEM}")
    MESSAGE(STATUS "No in-tree libIFEM found, looking for system library")
  ENDIF(NOT DEFINED FORCE_SYSTEM_IFEM OR NOT "${FORCE_SYSTEM_IFEM}")

  FIND_PATH(IFEM_INCLUDES
    NAMES SIMbase.h
    PATHS $ENV{HOME}/include
    PATH_SUFFIXES IFEM)

  FIND_LIBRARY(IFEM_LIBRARIES
    NAMES IFEM
    PATHS $ENV{HOME}/lib)

  # system lib always uses system tixml
  FIND_PACKAGE(TinyXML REQUIRED)
  SET(IFEM_DEPLIBS ${IFEM_DEPLIBS} ${TINYXML_LIBRARIES})
  SET(IFEM_H_PATH ${IFEM_INCLUDES})
ENDIF(IFEM_PATH)

INCLUDE(FindPackageHandleStandardArgs)
find_package_handle_standard_args(IFEM DEFAULT_MSG
                                  IFEM_LIBRARIES)

# Export version information
IF(IFEM_INCLUDES)
  EXECUTE_PROCESS(COMMAND cat "${IFEM_H_PATH}/IFEM.h" OUTPUT_VARIABLE IFEM_HEADER)
  STRING(REGEX MATCH "IFEM_VERSION_MAJOR ([0-9]+)" IFEM_VERSION_MAJOR ${IFEM_HEADER})
  STRING(REGEX REPLACE "IFEM_VERSION_MAJOR ([0-9]+)" "\\1" IFEM_VERSION_MAJOR "${IFEM_VERSION_MAJOR}")
  STRING(REGEX MATCH "IFEM_VERSION_MINOR ([0-9]+)" IFEM_VERSION_MINOR ${IFEM_HEADER})
  STRING(REGEX REPLACE "IFEM_VERSION_MINOR ([0-9]+)" "\\1" IFEM_VERSION_MINOR "${IFEM_VERSION_MINOR}")
  STRING(REGEX MATCH "IFEM_VERSION_PATCH ([0-9]+)" IFEM_VERSION_PATCH ${IFEM_HEADER})
  STRING(REGEX REPLACE "IFEM_VERSION_PATCH ([0-9]+)" "\\1" IFEM_VERSION_PATCH "${IFEM_VERSION_PATCH}")
  SET(IFEM_VERSION "${IFEM_VERSION_MAJOR}.${IFEM_VERSION_MINOR}.${IFEM_VERSION_PATCH}")
  SET(IFEM_ABI_VERSION ${IFEM_VERSION_MAJOR}.${IFEM_VERSION_MINOR})
ENDIF(IFEM_INCLUDES)

SET(IFEM_LIBRARIES ${IFEM_LIBRARIES} ${IFEM_DEPLIBS})
SET(IFEM_INCLUDES ${IFEM_INCLUDES} ${IFEM_DEPINCLUDES})

# Needed as we have templates using these flags
ENABLE_LANGUAGE(CXX)
IF(CMAKE_CXX_COMPILER_ID MATCHES Intel)
  SET(IFEM_CXX_FLAGS "${IFEM_CXX_FLAGS} -DUSE_MKL -mkl=sequential")
  SET(IFEM_BUILD_CXX_FLAGS "${IFEM_BUILD_CXX_FLAGS} -DUSE_MKL -mkl=sequential")
ELSE(CMAKE_CXX_COMPILER_ID MATCHES Intel)
  SET(IFEM_CXX_FLAGS "${IFEM_CXX_FLAGS} -DUSE_CBLAS")
  SET(IFEM_BUILD_CXX_FLAGS "${IFEM_BUILD_CXX_FLAGS} -DUSE_CBLAS")
  FIND_PACKAGE(CBLAS REQUIRED)
  FIND_PACKAGE(LAPACK REQUIRED)
ENDIF(CMAKE_CXX_COMPILER_ID MATCHES Intel)

SET(IFEM_CXX_FLAGS "${IFEM_CXX_FLAGS} -DReal=double")
